;
; Chain function & animation demo.
;
; Hazen 02/15
;

(import locate :local)

;; Sprockets.
(def sprocket1 ()
 (block

  ; Axle 4
  (tb 0 0 -0.5 0 90 0 "3705" "Black")

  ; Gear 16 Tooth
  (tb 0 0 0 0 0 0 "4019" "Light_Gray")
  
  ))

(def sprocket2 ()
 (block

  ; Axle 4
  (tb 0 0 -0.5 0 90 0 "3705" "Black")

  ; Gear 24 Tooth with Single Axle Hole
  (tb 0 0 0 0 0 0 "3648b" "Dark_Gray")

  ))

(def angle1 (* time-index 5) angle2 (/ angle1 (/ 24 16)))

; sprocket 1 at 0,0
(translate (list 0 0 0)
 (rotate (list 0 0 (+ angle1 7))
  (sprocket1)))

; sprocket 2 at 0,5
(translate (list 0 (bw 5) 0)
 (rotate (list 0 0 (+ angle2 12))
  (sprocket1)))

; sprocket 3 at 4,4
(translate (list (bw 4) (bw 4) 0)
 (rotate (list 0 0 (+ angle2 5))
  (sprocket2)))


;; A chain that goes around the sprockets

; Create the chain function. The fudge factor in the radius is so that the
; length of the chain is (approximately) a multiple of a chain link length.
(def a-chain (chain (list (list (bw 0) (bw 0) (bw 1.05) -1)
			  (list (bw 0) (bw 5) (bw 1.05) -1)
			  (list (bw 4) (bw 4) (bw 1.55) -1))))

; A chain link adjusted so that it's origin is the center of the link.
; This is necessary so that the links will appear to be hooked to each
; other in the final chain.
(def chain-link ()
 (translate (list 0 0 -9)

  ; Chain Link
  (part "3711" "Black")))

(def chain1 (offset)
 (for (i 29)
  (def lp (a-chain (* 15.5 (+ i offset))))
  (translate (list (aref lp 0) (aref lp 1) 0)
   (rotate (list 0 0 (aref lp 5))
    (rotate (list 0 90 180)
     (chain-link))))))

(chain1 (/ (* pi -1.05 angle1) 180.0))
