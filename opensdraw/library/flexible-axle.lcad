;
; Function to make adding flexible axles to a MOC easier.
;
; Hazen 02/15
;

(import locate :local)

;
; Create an axle of the specified length that goes along the specified curve.
; The curve starts after the initial straight end stud. This is (I think)
; pretty correct, less some optional lines.
;
; length - The total length of the axle in bricks / studs.
; a-curve - The curve function that the axle should follow.
;
(def flexible-axle (length a-curve)
 (block

  (def dist 0)

  ; The elements at the junction between axle & hose.
  (def disc (list "axlehol3"
		  "axleho10"
		  "axlehol9"))

  ; The positions of the vertices around an axle.
  (def vert (list (vector 6 0 0 1)
		  (vector 5.602 2 0 1)
		  (vector 2 2 0 1)
		  (vector 2 5.602 0 1)
		  (vector 0 6 0 1)
		  (vector -2 5.602 0 1)
		  (vector -2 2 0 1)
		  (vector -5.602 2 0 1)
		  (vector -6 0 0 1)
		  (vector -5.602 -2 0 1)
		  (vector -2 -2 0 1)
		  (vector -2 -5.602 0 1)
		  (vector 0 -6 0 1)
		  (vector 2 -5.602 0 1)
		  (vector 2 -2 0 1)
		  (vector 5.602 -2 0 1)))

  (def last-v 0)
  (def cur-v 0)

  ; Drawing axles.
  (def axle-start (pos)
   (block
    (set last-v (list))
    (def m (matrix (a-curve pos)))
    (for (elt vert)
     (append last-v (* m elt)))))

  (def axle-end (pos)
   (block
    (set cur-v (list))
    (def m (matrix (a-curve pos)))
    (for (elt vert)
     (append cur-v (* m elt)))
    (for (i (- (len vert) 1))
     (line (aref last-v i) (aref cur-v i))
     (triangle (aref last-v i) (aref last-v (+ i 1)) (aref cur-v i))
     (triangle (aref last-v (+ i 1)) (aref cur-v (+ i 1)) (aref cur-v i)))
    (def li (- (len vert) 1))
    (line (aref last-v li) (aref cur-v li))
    (triangle (aref last-v li) (aref last-v 0) (aref cur-v li))
    (triangle (aref last-v 0) (aref cur-v 0) (aref cur-v li))
    (set last-v cur-v)))

  ; Drawing cylinders.
  (def cylinder (pos)
   (block
    (def m1 (matrix (a-curve pos)))
    (def m2 (matrix (a-curve (+ pos 3.6))))

    (def sv (vector 6 0 0 1))

    (def v1 (* m1 sv))
    (def v2 (* m2 sv))
    (def d-angle 22.5)
    (for (angle d-angle d-angle 365)
     (def mr (matrix (list 0 0 0 0 0 angle)))
     (def v3 (* m1 mr sv))
     (def v4 (* m2 mr sv))
     (triangle v1 v3 v2)
     (triangle v2 v3 v4)
     (set v1 v3)
     (set v2 v4))
    ))

  ; Stud start element.
  (transform (matrix (a-curve dist))
   (rotate (vector 90 0 0)
    (scale (vector 1 5 1)
     (part "stud3a" 16))
    (scale (vector 6 1 6)
     (part "4-4disc.dat" 16))))


  ; Initial segment.
  (cylinder dist)
  (set dist (+ dist 3.6))
  (transform (matrix (a-curve dist))
   (rotate (vector -90 0 0)
    (for (elt disc)
     (part elt 16))))

  (axle-start dist)
  (set dist (+ dist 4.8))
  (axle-end dist)
  (transform (matrix (a-curve dist))
   (rotate (vector 90 0 0)
    (for (elt disc)
     (part elt 16))))

  (cylinder dist)
  (set dist (+ dist 3.6))
  (transform (matrix (a-curve dist))
   (rotate (vector -90 0 0)
    (for (elt disc)
     (part elt 16))))

  (axle-start dist)
  (set dist (+ dist 4.8))
  (axle-end dist)
  (transform (matrix (a-curve dist))
   (rotate (vector 90 0 0)
    (for (elt disc)
     (part elt 16))))

  (cylinder dist)
  (set dist (+ dist 3.6))
  (transform (matrix (a-curve dist))
   (rotate (vector -90 0 0)
    (for (elt disc)
     (part elt 16))))


  ; Middle segments.
  (axle-start dist)
  (while (< dist (- length (bw 3)))
   (set dist (+ dist 4))
   (axle-end dist))

  (if (!= dist (- length (bw 3)))
    (block
     (set dist (- length (bw 3)))
     (axle-end dist)))

  ; Final segment.
  (transform (matrix (a-curve dist))
   (rotate (vector 90 0 0)
    (for (elt disc)
     (part elt 16))))

  (cylinder dist)
  (set dist (+ dist 3.6))
  (transform (matrix (a-curve dist))
   (rotate (vector -90 0 0)
    (for (elt disc)
     (part elt 16))))

  (axle-start dist)
  (set dist (+ dist 4.8))
  (axle-end dist)
  (transform (matrix (a-curve dist))
   (rotate (vector 90 0 0)
    (for (elt disc)
     (part elt 16))))

  (cylinder dist)
  (set dist (+ dist 3.6))
  (transform (matrix (a-curve dist))
   (rotate (vector -90 0 0)
    (for (elt disc)
     (part elt 16))))

  (axle-start dist)
  (set dist (+ dist 4.8))
  (axle-end dist)
  (transform (matrix (a-curve dist))
   (rotate (vector 90 0 0)
    (for (elt disc)
     (part elt 16))))

  (cylinder dist)
  (set dist (+ dist 3.6))

  ; Stud end element.
  (transform (matrix (a-curve dist))
   (rotate (vector -90 0 0)
    (scale (vector 1 5 1)
     (part "stud3a" 16))
    (scale (vector 6 1 6)
     (part "4-4disc.dat" 16))))
  ))

